/**
 * @description This ruleset provides basic authentication protection for the Prasiri Worship Manager application. It requires users to be logged in to access any data, but does not enforce granular permissions or data validation. This is a simplified configuration intended for rapid prototyping.
 * @dataStructure The Firestore database is organized into top-level collections such as `songs`, `services`, `team_members`, `schedules`, `skill_focus_sessions`, `peer_groups`, `user_roles`. Subcollections like `contact_statuses` exist under `peer_groups`.
 * @keySecurityDecisions All read and write operations require the user to be authenticated. Specific roles and granular permissions are not yet enforced. Data validation is minimal to allow for flexible schema iteration.
 * @denormalization None. The rules only check for authentication and do not rely on denormalized data for authorization.
 * @structuralSegregation None. All collections are treated the same with respect to authentication requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read and write song documents.
     * @path /songs/{songId}
     * @allow (read, write) - Authenticated user
     * @deny (read, write) - Unauthenticated user
     * @principle Requires user to be signed in to access songs.
     */
    match /songs/{songId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read and write service documents.
     * @path /services/{serviceId}
     * @allow (read, write) - Authenticated user
     * @deny (read, write) - Unauthenticated user
     * @principle Requires user to be signed in to access services.
     */
    match /services/{serviceId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read and write team member documents.
     * @path /team_members/{teamMemberId}
     * @allow (read, write) - Authenticated user
     * @deny (read, write) - Unauthenticated user
     * @principle Requires user to be signed in to access team members.
     */
    match /team_members/{teamMemberId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read and write schedule documents.
     * @path /schedules/{scheduleId}
     * @allow (read, write) - Authenticated user
     * @deny (read, write) - Unauthenticated user
     * @principle Requires user to be signed in to access schedules.
     */
    match /schedules/{scheduleId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read and write skill focus session documents.
     * @path /skill_focus_sessions/{skillFocusSessionId}
     * @allow (read, write) - Authenticated user
     * @deny (read, write) - Unauthenticated user
     * @principle Requires user to be signed in to access skill focus sessions.
     */
    match /skill_focus_sessions/{skillFocusSessionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read and write peer group documents.
     * @path /peer_groups/{peerGroupId}
     * @allow (read, write) - Authenticated user
     * @deny (read, write) - Unauthenticated user
     * @principle Requires user to be signed in to access peer groups.
     */
    match /peer_groups/{peerGroupId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();

      /**
       * @description Allows authenticated users to read and write contact status documents within a peer group.
       * @path /peer_groups/{peerGroupId}/contact_statuses/{contactStatusId}
       * @allow (read, write) - Authenticated user
       * @deny (read, write) - Unauthenticated user
       * @principle Requires user to be signed in to access contact statuses.
       */
      match /contact_statuses/{contactStatusId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }
    }

    /**
     * @description Allows authenticated users to read and write user role documents.
     * @path /user_roles/{userId}
     * @allow (read, write) - Authenticated user
     * @deny (read, write) - Unauthenticated user
     * @principle Requires user to be signed in to access user roles.
     */
    match /user_roles/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}